
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Microsoft.AspNet.SignalR;
using static System.Random;
using System.Collections;


namespace ChatTextProject.Hubs
{
    public class ChatHub : Hub
    {
        // For the Rock/Paper/Scissors game. 
        public static string rps1User = null;
        public static int? rps1 = null;

        // For the Trivia game. 
        public static string tGamePlayer = null;
        public static int? tGameChoice = null;

        // A random object called num to call the .Next() method on.
        public static Random random = new Random();

        // A random variable generated by the trivia game. 
        public static int triviaRandom;


        //List of Hangman words
        public static string[] wordList = { "ocean", "mississippi", "opinion" };
        
        public static string daWord = "";
        public static string blanks = "";
        public static string revealed = "";

        public static ArrayList daWordArrayList = new ArrayList();
        public static ArrayList blanksArrayList = new ArrayList();

        public static int guesses = 16;



        public void Send(string name, string message)
        {
            // Call the broadcastMessage method to update clients.
            Clients.All.broadcastMessage(name, message);
        }

        public void TextEmoji(string name, int emojiChoice)
        {
            if (emojiChoice == 0) { Clients.All.broadcastMessage(name, "° ͜ʖ ͡°"); }
            else if (emojiChoice == 1) { Clients.All.broadcastMessage(name, "♪"); }
            else if (emojiChoice == 2) { Clients.All.broadcastMessage(name, "•◡•"); }
            else if (emojiChoice == 3) { Clients.All.broadcastMessage(name, "ಥ_ಥ"); }
            else if (emojiChoice == 4) { Clients.All.broadcastMessage(name, "¬_¬"); }
            else if (emojiChoice == 5) { Clients.All.broadcastMessage(name, "˘⌣˘"); }
            else if (emojiChoice == 6) { Clients.All.broadcastMessage(name, "♥‿♥"); }
            else if (emojiChoice == 7) { Clients.All.broadcastMessage(name, "o_O??"); }
            else if (emojiChoice == 8) { Clients.All.broadcastMessage(name, "(づ￣ ³￣)づ"); } 
            else if (emojiChoice == 9) { Clients.All.broadcastMessage(name, "( ⚆ _ ⚆ )"); }
            else if (emojiChoice == 10) { Clients.All.broadcastMessage(name, "ᕙ(⇀‸↼‶)ᕗ"); }
            else if (emojiChoice == 11) { Clients.All.broadcastMessage(name, "•̪ ●"); }
            else if (emojiChoice == 12) { Clients.All.broadcastMessage(name, "(⊙︿⊙✿)"); }
            else if (emojiChoice == 13) { Clients.All.broadcastMessage(name, "(￣。￣)～ｚｚｚ"); }
            else if (emojiChoice == 14) { Clients.All.broadcastMessage(name, "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧"); }
            else if (emojiChoice == 15) { Clients.All.broadcastMessage(name, "$_$"); }
        }

        
        public static void ArrayfyDaWord()
        {
            //fill in the daWordArrayList with every letter of daWord as its elements
            for (int i = 0; i<daWord.Length; i++)
            {
                daWordArrayList.Add(daWord.Substring(i, 1));
            }
        }
        public static void ArrayfyBlanks()
        {
            for (int i = 0; i < daWord.Length; i++)
            {
                blanksArrayList.Add("_ ");
            }
        }
        public static void GenerateBlanks()
        {
            for (int i = 0; i < daWord.Length; i++)
            {
                blanks += "_ ";
            }
        }

        public static void UpdateRevealed()
        {
            for (int i = 0; i < blanksArrayList.Count; i++)
            {
                revealed += blanksArrayList[i];
            }
        }

        public void newHangmanGame()
        {
            daWordArrayList.Clear();
            blanksArrayList.Clear();
            daWord = wordList[random.Next(wordList.Length)];
            ArrayfyDaWord();

            blanks = "";
            revealed = "";
            GenerateBlanks();
            ArrayfyBlanks();
            guesses = 16;
            Clients.All.broadcastMessage("", " ");
            Clients.All.broadcastMessage("Hangman Game", "The hangman game has started! Here's your word: " + blanks);
            Clients.All.broadcastMessage("", "Below are the gallows:");
            Clients.All.broadcastMessage("", "  _______ ");
            Clients.All.broadcastMessage("", " |       |");
            Clients.All.broadcastMessage("", " |         ");
            Clients.All.broadcastMessage("", " |         ");
            Clients.All.broadcastMessage("", " |         ");
            Clients.All.broadcastMessage("", " |         ");
            Clients.All.broadcastMessage("", " |         ");
            Clients.All.broadcastMessage("", " |         ");
            Clients.All.broadcastMessage("", " |         ");
            Clients.All.broadcastMessage("", "---");

            Clients.All.broadcastMessage("", "YOU ONLY HAVE 16 GUESSES. Now take turns guessing. Good luck!");


        }
        public void Hangman(string name, string message)
        {
            if (guesses > 0)
            {

                if (message.Length == 0)
                {
                    Clients.All.broadcastMessage("Hangman Game", "*ERROR* Did you not type anything? We won't count that as a guess. Try again!");
                }
                else if (message.Length > daWord.Length)
                {
                    Clients.All.broadcastMessage("Hangman Game", "*ERROR* Your Guess is longer than the word... Probably a spelling error. We won't count that as a guess. Try again!");
                }
                else if (message.Length > 1 && message.Length < daWord.Length)
                {
                    Clients.All.broadcastMessage("Hangman Game", " *ERROR* Oops! Your guess is more than one letter... or has a spelling error. We won't count that as a guess. Try again!");
                }
                else if (message.Length == daWord.Length)
                {

                    if (message == daWord)
                    {
                        Clients.All.broadcastMessage("Hangman Game", "YES! You guessed right! The word was " + daWord + "! You win! **Game Over**");
                        return;
                    }
                    else
                    {
                        Clients.All.broadcastMessage("Hangman Game", "Nope, good try, but that's not the right word!");
                    }
                    guesses--;
                }
                else
                {
                    if (daWord.IndexOf(message) != -1)
                    {
                        for (int i = 0; i < daWordArrayList.Count; i++)
                        {
                            if ((string)(daWordArrayList[i]) == message)
                            {
                                blanksArrayList[i] = message + " ";
                            }
                        }
                        UpdateRevealed();
                        Clients.All.broadcastMessage("Hangman Game", "Yayy! That letter is in the word! This is what you have so far: " + revealed);
                        if (revealed.IndexOf("_") == -1)
                        {
                            Clients.All.broadcastMessage("Hangman Game", "YES! You guessed right! The word was " + daWord + "! You win! **Game Over**");
                            return;
                        }
                        revealed = "";
                    }
                    else
                    {
                        guesses--;
                        Clients.All.broadcastMessage("Hangman Game", "Oof. Wrong guess... Try again. You have " + guesses + " tries left.");
                        drawHangman();
                    }

                    
                }
            }
            else
            {
                guesses--;
                drawHangman();
                Clients.All.broadcastMessage("Hangman Game", "You ran out of guesses! You lose:( Maybe you'll be luckier next time! *GAMEOVER* ");
                return;
            }
            
        }

        //"  _______     \n"+
        //" |       |     \n"+
        //" |       o     \n" +
        //" |      /|\    \n" +
        //" |    _/ | \_  \n" +
        //" |       |     \n" +
        //" |      / \    \n" +
        //" |    _/   \_  \n" +
        //" |             \n" +
        //"---"

        //    Clients.All.broadcastMessage("", "  _______       ");
        //    Clients.All.broadcastMessage("", " |       |      ");
        //    Clients.All.broadcastMessage("", " |              ");
        //    Clients.All.broadcastMessage("", " |              ");
        //    Clients.All.broadcastMessage("", " |              ");
        //    Clients.All.broadcastMessage("", " |              ");
        //    Clients.All.broadcastMessage("", " |              ");
        //    Clients.All.broadcastMessage("", " |              ");
        //    Clients.All.broadcastMessage("", " |              ");
        //    Clients.All.broadcastMessage("", "---"             );

        public void drawHangman()
        {
            if (guesses == 15)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 14)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 13)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |       |\\     ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 12)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\     ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 11)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\     ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 10)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |       | \\   ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 9)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |     / | \\   ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 8)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\   ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 7)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 6)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 5)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |        \\     ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 4)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |        \\     ");
                Clients.All.broadcastMessage("", " |         \\    ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 3)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |      / \\     ");
                Clients.All.broadcastMessage("", " |         \\     ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 2)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |      / \\     ");
                Clients.All.broadcastMessage("", " |     /   \\     ");
                Clients.All.broadcastMessage("", " |              ");
                Clients.All.broadcastMessage("", "---");
            }
            else if (guesses == 1)
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |      / \\     ");
                Clients.All.broadcastMessage("", " |    _/   \\     ");
                Clients.All.broadcastMessage("", " |                ");
                Clients.All.broadcastMessage("", "---");
            }
            else
            {
                Clients.All.broadcastMessage("", "  _______       ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |       o      ");
                Clients.All.broadcastMessage("", " |      /|\\    ");
                Clients.All.broadcastMessage("", " |    _/ | \\_  ");
                Clients.All.broadcastMessage("", " |       |      ");
                Clients.All.broadcastMessage("", " |      / \\     ");
                Clients.All.broadcastMessage("", " |    _/   \\_    ");
                Clients.All.broadcastMessage("", " |                ");
                Clients.All.broadcastMessage("", "---");
            }
           
        }

        public void RockPaperScissor(string name, int gesture)
        {
            Clients.All.broadcastMessage($"{name} just made a rock/paper/scissor gesture!");
            if (rps1 == null)
            {
                rps1User = name;
                rps1 = gesture;
            }
            else
            {
                // 0 is rock; 1 is paper; 2 is scissor.
                if (rps1 == 0)
                {
                    if (gesture == 0)
                    {
                        Clients.All.broadcastMessage("RPS", $"Oops. It's a tie! Both players chose rocks.");
                    }
                    else if (gesture == 1)
                    {
                        Clients.All.broadcastMessage("RPS", $"{name} wins! {rps1User} chose rock, and {name} chose paper.");
                    }
                    else if (gesture == 2)
                    {
                        Clients.All.broadcastMessage("RPS", $"{rps1User} wins! {rps1User} chose rock, and {name} chose scissors.");
                    }
                }
                else if (rps1 == 1)
                {
                    if (gesture == 0)
                    {
                        Clients.All.broadcastMessage("RPS", $"{rps1User} wins! {rps1User} chose paper, and {name} chose rock.");
                    }
                    else if (gesture == 1)
                    {
                        Clients.All.broadcastMessage("RPS", $"Oops. It's a tie! Both players chose papers.");
                    }
                    else if (gesture == 2)
                    {
                        Clients.All.broadcastMessage("RPS", $"{name} wins! {rps1User} chose paper, and {name} chose scissors.");
                    }
                }
                else if (rps1 == 2)
                {
                    if (gesture == 0)
                    {
                        Clients.All.broadcastMessage("RPS", $"{name} wins! {rps1User} chose scissor, and {name} chose rock.");
                    }
                    else if (gesture == 1)
                    {
                        Clients.All.broadcastMessage("RPS", $"{rps1User} wins! {rps1User} chose scissor, and {name} chose paper.");
                    }
                    else if (gesture == 2)
                    {
                        Clients.All.broadcastMessage("RPS", $"Oops. It's a tie! Both players chose scissors.");
                    }
                }
                rps1 = null;
                rps1User = null;
            }
        }

        /* The following method checks if the message contains the key phrase.
        The method returns true only if the key phrase is in one of the three forms after the message is trimmed: 
        "key phrase" (key phrase is the entire message) or 
        " key phrase " (key phrase is in the middle of the message) or 
        " key phrase" (key phrase is at the end of the message)
        */
        public static bool FindKeyPhrase(string keyPhrase, string answer)
        {
            string trimmedMessage = answer.Trim();
            int phraseLength = keyPhrase.Length;
            if (trimmedMessage.IndexOf(" " + keyPhrase + " ") != -1)
            {
                return true;
            }
            else if(trimmedMessage.IndexOf(" " + keyPhrase) != -1)
            {
                return true;
            }
            else if(trimmedMessage.IndexOf(keyPhrase) != -1)
            {
                return true;
            }
            else 
            {
                return false;
            }
        }

        public void NewTriviaGame(int? game)
        {
            // create an array that stores general questions
            string[] generalQ = new string[7];
            generalQ[0] = "Who is the first president of the United States?";
            generalQ[1] = "What is the biggest mammal in the world?";
            generalQ[2] = "Who wrote Julius Caesar, Macbeth and Hamlet?";
            generalQ[3] = "What is the most abundant gas in Earth's atmosphere?";
            generalQ[4] = "Who lived at 221b, Baker Street, London?";
            generalQ[5] = "How many children does Queen Elizabeth II have? (in digit form)";
            generalQ[6] = "What's the capital of Ecuador?";

            // create an array that stores geography questions. 
            string[] geographyQ = new string[7];
            geographyQ[0] = "What country has the most natural lakes?";
            geographyQ[1] = "What is the largest desert in the world?";
            geographyQ[2] = "Which African country has the most pyramids?";
            geographyQ[3] = "What is the flattest continent in the world?";
            geographyQ[4] = "What is the fastest flowing river in the world?";
            geographyQ[5] = "Which European country is home to the city of Transylvania?";
            geographyQ[6] = "What is the national river of Russia?";

            // create an array that stores harry potter questions. 
            string[] harryPotterQ = new string[7];
            harryPotterQ[0] = "What is the name of Harry Potter's pet owl?";
            harryPotterQ[1] = "In what year was the first Harry Potter movie released?";
            harryPotterQ[2] = "What is the name of the three-headed dog that guards the Philosopher's Stone?";
            harryPotterQ[3] = "What is James Potter's Patronus?";
            harryPotterQ[4] = "What kind of animagus is Rita Skeeter?";
            harryPotterQ[5] = "What is the name of Hogwart's Squib caretaker who has a cat?";
            harryPotterQ[6] = "Who became Harry Potter's wife?";

            
            tGameChoice = game;
            
            if(tGameChoice == 0)
            {
                int num = random.Next(0,6);
                triviaRandom = num; 
                Clients.All.broadcastMessage("Trivia", generalQ[num]);
            }
            else if(tGameChoice == 1)
            {
                int num = random.Next(0,6);
                triviaRandom = num; 
                Clients.All.broadcastMessage("Trivia", geographyQ[num]);
            }
            else if(tGameChoice == 2)
            {
                int num = random.Next(0,6);
                triviaRandom = num; 
                Clients.All.broadcastMessage("Trivia", harryPotterQ[num]);
            }
        }

        public void TriviaGame(string name, string triviaAnswer)
        {
            // create an array that stores general answers. 
            // all answers are in lowercase. 
            string[] generalA = new string[7];
            generalA[0] = "washington";
            generalA[1] = "blue whale";
            generalA[2] = "shakespeare";
            generalA[3] = "nitrogen";
            generalA[4] = "sherlock holmes";
            generalA[5] = "4";
            generalA[6] = "quito";

            // create an array that stores geography answers. 
            // all answers are in lowercase. 
            string[] geographyA = new string[7];
            geographyA[0] = "canada";
            geographyA[1] = "sahara";
            geographyA[2] = "sudan";
            geographyA[3] = "australia";
            geographyA[4] = "amazon";
            geographyA[5] = "romania";
            geographyA[6] = "volga";

            // create an array that stores harry potter answers. 
            // all answers are in lowercase. 
            string[] harryPotterA = new string[7];
            harryPotterA[0] = "hedwig";
            harryPotterA[1] = "2001";
            harryPotterA[2] = "fluffy";
            harryPotterA[3] = "stag";
            harryPotterA[4] = "beetle";
            harryPotterA[5] = "filch";
            harryPotterA[6] = "ginny";

            string input = triviaAnswer.ToLower(); // convert the trivia answer to lowercase 
            if(tGameChoice == 0)
            {
               if(FindKeyPhrase(generalA[triviaRandom], input))
               {
                   // Even if one player answers correctly, a second player can still answer the question and receive feedback about whether it's correct. 
                   Clients.All.broadcastMessage("Trivia", $"{name}'s answer is correct!");
               }
               else 
               {
                   Clients.All.broadcastMessage("Trivia", $"Oops. {name}'s answer is incorrect. Try again!");
               }
            }
            else if(tGameChoice == 1)
            {
                if(FindKeyPhrase(geographyA[triviaRandom], input))
               {
                   // Even if one player answers correctly, a second player can still answer the question and receive feedback about whether it's correct. 
                   Clients.All.broadcastMessage("Trivia", $"{name}'s answer is correct!");
               }
               else 
               {
                   Clients.All.broadcastMessage("Trivia", $"Oops. {name}'s answer is incorrect. Try again!");
               }
            }
            else if(tGameChoice == 2)
            {
                if(FindKeyPhrase(harryPotterA[triviaRandom], input))
               {
                   // Even if one player answers correctly, a second player can still answer the question and receive feedback about whether it's correct. 
                   Clients.All.broadcastMessage("Trivia", $"{name}'s answer is correct!");
               }
               else 
               {
                   Clients.All.broadcastMessage("Trivia", $"Oops. {name}'s answer is incorrect. Try again!");
               }
            }
        }
    }
}